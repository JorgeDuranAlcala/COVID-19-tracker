{"version":3,"sources":["components/Cards/Cards.tsx","api/index.ts","components/Chart/Chart.tsx","components/CountryPicker/CountryPicker.tsx","App.tsx","serviceWorker.ts","index.tsx","components/Cards/Cards.module.css","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","Images/covid19-logo.jpg"],"names":["Cards","props","Data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","xs","md","component","Card","card","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","url","fetchData","country","a","changeUrl","fetch","method","then","res","json","modifiedData","console","log","fetchDailyData","data","map","dailyData","total","date","reportDate","fetchDataFromCountry","countries","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChar","options","legend","display","title","text","CountryPicker","setCountries","fetchCountryData","FormControl","formControl","NativeSelect","defaultValue","onChange","e","handleCountryChange","index","name","key","App","state","target","setState","this","logo","src","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.cc589810.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { apiData, data } from \"../../models/api.interface\";\r\nimport { Card, Typography, CardContent, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\n\r\ninterface Props {\r\n  Data: apiData<data>;\r\n}\r\n\r\nconst Cards = (props: Props) => {\r\n  const {\r\n    Data: { confirmed, recovered, lastUpdate, deaths },\r\n  } = props;\r\n\r\n  if(!recovered || !deaths) {\r\n    return (<>..loading</>)\r\n  }\r\n\r\n  const _getKeyValue_ = (key: string) => (obj: Record<string, any>) => obj[key];\r\n\r\nreturn (\r\n    <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n            <Grid item xs={12} md={3} component={Card} className={styles.card}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>infected</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={confirmed?.value || 0} duration={2} /></Typography>\r\n                    <Typography color=\"textSecondary\">REAL DATE</Typography>\r\n                    <Typography variant=\"body2\">Number of active cases of covid-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item xs={12} md={3} component={Card} className={styles.card}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>recoverd</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2} /></Typography>\r\n                    <Typography color=\"textSecondary\">REAL DATE</Typography>\r\n                    <Typography variant=\"body2\">Number of recoveries from covid-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n            <Grid item xs={12} md={3} component={Card} className={styles.card}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2} /></Typography>\r\n                    <Typography color=\"textSecondary\">REAL DATE</Typography>\r\n                    <Typography variant=\"body2\">Number of Deaths case of covid-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n        </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import {\r\n  apiData,\r\n  data,\r\n  dailyData,\r\n  modifiedData,\r\n  countryResponse,\r\n} from \"../models/api.interface\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country?: string) => {\r\n  try {\r\n    let changeUrl = url;\r\n\r\n    if (country) {\r\n      changeUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    const { recovered, deaths, confirmed, lastUpdate } = (\r\n    await fetch(\r\n      changeUrl,\r\n      { method: \"GET\" }\r\n    ).then((res: any) => res.json())) as apiData<data>;\r\n\r\n    const modifiedData = { recovered, deaths, confirmed, lastUpdate };\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const data = (await fetch(`${url}/daily`, { method: \"GET\" })\r\n      .then((res) => res.json())\r\n      .then((data) => data)) as dailyData[];\r\n\r\n    const modifiedData: modifiedData[] = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDataFromCountry = async () => {\r\n  try {\r\n    const data = (await fetch(`${url}/countries`, { method: \"GET\" })\r\n      .then((res) => res.json())\r\n      .then((data) => data)) as countryResponse;\r\n\r\n    return data.countries;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect, Component } from \"react\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport styles from \"./Chart.module.css\";\r\nimport {  modifiedData, apiData, data } from \"../../models/api.interface\";\r\n\r\ninterface Props {\r\n    country: string,\r\n    Data: apiData<data>\r\n}\r\n\r\nconst Chart = (props: Props) => {\r\n  const [dailyData, setDailyData] = useState<modifiedData[]>([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n\r\n        const data  = await fetchDailyData() as modifiedData[]\r\n       setDailyData(data)\r\n   \r\n    };\r\n\r\n\r\n    fetchApi();\r\n  }, [dailyData]);\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n        data={{\r\n            labels: dailyData.map(({ date }) => date),\r\n            datasets: [\r\n                {\r\n                    data: dailyData.map(({ confirmed }) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    backgroundColor: 'rgba(5, 5, 255,0.5)',\r\n                    fill: true\r\n                },\r\n                {\r\n                    data: dailyData.map( ({ deaths }) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255,5,5,0.5)',\r\n                    fill: true\r\n                }\r\n            ]\r\n        }}\r\n    />\r\n  ) : null;\r\n\r\n  const {country, Data: { lastUpdate, confirmed, recovered, deaths } } = props;\r\n        \r\n\r\n  const barChar = country ? (\r\n    <Bar\r\n        data={{\r\n            labels: ['Infected', 'Recovered', 'Deaths'],\r\n            datasets: [\r\n                {\r\n                    label: 'People',\r\n                    data: [confirmed?.value, recovered?.value, deaths?.value],\r\n                    backgroundColor: [\r\n                        'blue',\r\n                        'green',\r\n                        'red'\r\n                    ]\r\n                },\r\n            ]\r\n        }}\r\n        options={{\r\n            legend: { display: false },\r\n            title: { display: true, text: `Current state in ${country}` }\r\n        }}\r\n    />\r\n    ) : null;\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n        { country ? barChar : lineChart }\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from 'react'\r\nimport { FormControl, NativeSelect } from '@material-ui/core'\r\nimport styles from \"./CountryPicker.module.css\"\r\nimport { fetchDataFromCountry } from '../../api'\r\nimport { country, countryResponse } from '../../models/api.interface'\r\n\r\ninterface Props {\r\n    handleCountryChange: (e: React.ChangeEvent<HTMLSelectElement>) => void;\r\n}\r\n\r\nconst CountryPicker = (props: Props) => {\r\n\r\n    const [countries, setCountries] = useState<country[]>([])\r\n\r\n    useEffect(() => {\r\n        \r\n        const fetchCountryData =  async () => {\r\n            try {\r\n                const data = await fetchDataFromCountry() as country[];\r\n                setCountries(data)\r\n                \r\n            } catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        \r\n        fetchCountryData()\r\n        \r\n    }, [setCountries])\r\n\r\n    \r\n    return (\r\n            <FormControl className={styles.formControl}>\r\n                <NativeSelect defaultValue=\"\"  onChange={e => props.handleCountryChange(e)}>\r\n                    <option value=\"\">global</option>\r\n                    {\r\n                        countries.map( ({ name }, index) => (\r\n                            <>\r\n                                <option key={index} value={name}>{name}</option>\r\n                            </>\r\n                        ) )\r\n                    }\r\n                </NativeSelect>\r\n            </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React, { Component, ChangeEvent } from 'react';\nimport styles from './App.module.css';\nimport { Card, Chart, CountryP } from './components';\nimport { fetchData } from './api';\nimport logo from \"./Images/covid19-logo.jpg\"\nimport { apiData, data } from './models/api.interface';\n\ninterface State {\n  data: apiData<data>\n  country: string\n}\n\nclass App extends Component {\n\n  state: State = {\n    data: {},\n    country: ''\n  }\n\n\n  async componentDidMount() {\n    const res = await fetchData();\n    this.setState({ data: res })\n    \n  }\n  \n\n  handleCountryChange = async (e: ChangeEvent<HTMLSelectElement>) => {\n    try {\n      const { value }  = e.target;\n      const res = await fetchData(value);\n      this.setState({ data: res, country: value })\n    } catch (error) {\n      console.log(error)\n    }\n  }\n  \n  render() {\n\n    const { data, country } = this.state;\n\n    return (\n    <div className={styles.App}>\n      <div className={styles.container}>\n        <div className={styles.logo}>\n            <img src={logo} alt=\"covid19-logo\"/>\n        </div>\n        <Card Data={data}/>\n        <CountryP handleCountryChange={this.handleCountryChange} />\n        <Chart country={country} Data={data}/>\n      </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Cards_card__1m8K9\",\"container\":\"Cards_container__1PVKQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__Vnm6m\",\"container\":\"App_container__1hEpy\",\"logo\":\"App_logo__YFWEg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1xzSE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2eYyz\"};","module.exports = __webpack_public_path__ + \"static/media/covid19-logo.a691af5e.jpg\";"],"sourceRoot":""}